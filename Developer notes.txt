Every component to have state and to tell React what there's been a change we use hook useState

UseState - this is array wich two meanings:
    first meaning: set value
    second meaning: state changing function

------------------CODE------------------

import React, { useState } from 'react';

function App() {
  const [likes, setLikes] = useState(0); //useState hook

  // a function that increments the "likes" variable by 1
  function increment() {
    setLikes(likes + 1);
  }

  // a function that decrements the "likes" variable by 1
  function decrement() {
    setLikes(likes - 1);
  }

  return (
    <div className="App">
      <h1>{likes}</h1>
      <button onClick={increment}>Increment</button> {/* button that increases the number by 1 */}
      <button onClick={decrement}>Decrement</button> {/* button that decrease the number by 1 */}
    </div>
  );
}

export default App;

------------------/CODE------------------


Managed component is component whose value we can change by changing its state.

OnChange 

------------------CODE------------------

import React, { useState } from 'react';
function App() { 
  const [likes, setLikes] = useState(0); //useState hook
  const [value, setValue] = useState('TEXT in input')

  // a function that increments the "likes" variable by 1
  function increment() {
    setLikes(likes + 1);
  }

  // a function that decrements the "likes" variable by 1
  function decrement() {
    setLikes(likes - 1);
  }
  
 
  console.log(value);


  return (
    <div className="App">
      <h1>{likes}</h1>
      <h1>{value}</h1>
      <input 
        type="text" value={likes} 
        onChange={event => setValue(event.target.value)}
      
      />
      <button onClick={increment}>Increment</button> {/* button that increases the number by 1 */}
      <button onClick={decrement}>Decrement</button> {/* button that decrease the number by 1 */}
    </div>
  );
}

export default App;
------------------/CODE------------------

//Function counter
------------------CODE-------------------
import React, { useState } from 'react'

export default function App() {
  const [count, setCount] = useState(0)

  function inc() {
    setCount(count + 1)
  }
  
  console.log(count);
  return (
    <div>
      <h2>{count}</h2>
      <button onClick={inc}>+</button>
      <button onClick={() => setCount(count - 1)}>-</button>
    </div>
  )
}
------------------/CODE-------------------

Callback - is function transferred in other function as an arqument


// Class counter
------------------CODE-------------------
import React, { Component } from 'react'

export default class ClassFlugger extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    }
  }

  render() {
    return (
      <div>
        <h2>{this.state.count}</h2>
        <button onClick={() => this.setState({count: this.state.count + 1}) }>+</button>
        <button onClick={() => this.setState({count: this.state.count - 1}) }>-</button>
      </div>
    )
  }
}
------------------/CODE-------------------


Props - это обьект в который я могу заворачивать аргументы и передовать его в компоненты это позвляет мне их переиспользовать и коректировать изменяемые значения такие как заголовок поста под конкретный случай или например добавить два поста в файле App.js и каждому указать уникальное название и контент используя аргументы
------------------CODE-------------------
// App.js 
import React from 'react'
import ClassFlugger from './components/ClassFlugger'
import Flugger from './components/Flugger'
import Post from './components/Post'
import './styles/App.css'

export default function App() {
  return (
    <div className='App'>
      <Post post={{id: 1, title: 'Golang', body: 'Description'}}/>
    </div>
  )
}    
  


// PostItems.jsx
import React from 'react'
import '../styles/App.css'


export default function Post(props) {
  console.log(props)
  return (
    <div className='Post'>
      <div className='Post__content'>
          <strong>{props.post.id}, {props.post.title}</strong>
          <div>
            {props.post.body}
          </div>
          <div className='Post__buttons'>
            <button>Post</button>
            <button>Delete</button>
          </div>
        </div>  
    </div>
  )
}

------------------/CODE-------------------


Преобразование масива с элементами в массив с React компонентами
------------------CODE-------------------
// App.js
import React, { useState } from 'react';

import ClassFlugger from './components/ClassFlugger'
import Flugger from './components/Flugger'
import PostItems from './components/PostItems'
import './styles/App.css'

export default function App() {
    const [posts, setPosts] = useState([
      {id: 0, title: 'Golang it', description: 'Description'},  //element
      {id: 1, title: 'Golang it1', description: 'Description'}, //element
      {id: 2, title: 'Golang it2', description: 'Description'}  //element
    ]);


    return (
    <div className='App'>
      <h1 style={{textAlign: 'center'}}>Posts List</h1>
      {posts.map(post => 
        <PostItems post={post} key={post.id} />
      )}
    </div>
  )
}

// PostItems.jsx
import React, { useState } from 'react';

export default function PostItems(props) {
  return (
    <div>
      <div className="PostItems">
        <div className="PostItems__content">
          <header>{props.post.id}. {props.post.title}</header>
          <div className="PostItems__description">{props.post.description}</div>
          <div className="PostItems__buttons">
            <button>Create</button>
            <button>Delete</button>
          </div>
        </div>
      </div>
    </div>
  )
}

------------------/CODE-------------------    

Standart css styles for button
------------------CODE-------------------
//App.css
button {
  position: relative;
  display: inline-block;
  cursor: pointer;
  outline: none;
  border: 0;
  vertical-align: middle;
  text-decoration: none;
  font-size: inherit;
  font-family: inherit;
}
------------------/CODE-------------------

How make UI component?
Don't never use margin and positioning styles inside a component
If I want to use a margin styles for component I just add this component in Block and to that block margin styles
Do the same with the width for the component
If component to use buiznes logic don't use state inside a component  
Don't pass function in props inside a component
Use PropTipes

70% information we remember when participate in discussions
90% information we remember when to worked and imitate a real work
info@ingrad.com 
rabota@ingrad.com - РАБОТА 


https://webgolovolomki.com/kak-sdelat-effekt-nazhatiya-knopki-na-css/ гайд по анимации кнопок

I can write down props intresting method:
Insofar as props this object I can not write 'props' in arquments my component, but I can write down '{}' and write down inside these brackets name needing me parameter

EXAMPLE:
instead of this:
------------------CODE--------------------
//PostList.jsx 
import React from 'react';
import PostItem from '../PostItem/PostItem'

export default function PostList(props) {
  console.log(props);
  return (
    <div>
      <h1 style={{textAlign: 'center'}}>
        {props.title}
      </h1>
      {props.posts.map((post) => 
        <PostItem post={post} key={props.id} />
      )}
    </div>
  )
}
------------------/CODE-------------------
it:
------------------CODE--------------------
//PostList.jsx 
import React from 'react';
import PostItem from '../PostItem/PostItem'
// {posts, title, id}
export default function PostList({posts, title, id}) {
  console.log(props);
  return (
    <div>
      <h1 style={{textAlign: 'center'}}>
        {title}
      </h1>
      {posts.map((post) => 
        <PostItem post={post} key={id} />
      )}
    </div>
  )
}
------------------/CODE-------------------  

I can to reset styles just importing normalize styles file
------------------CODE--------------------
@import-normalize;
------------------/CODE-------------------


Хуки можно вкладывать только в верхний уровень вложенности, то есть их нельзя вкладывать в функции и т.д.


Как отрисовать несколько компонентов на основании массива?
Создаю useState в него помещаю массив, а в этот массив сколько мне нужно обьектов даю этим обьектам поля со свойствами в данном случае это title: со заначением 'title', body: со значением 'decription' далее вызываю в коде JSX переменную useState-а обращаюсь через точку к функции map и передаю аргументом функцию (callback), которая принимает аргкментом обьект который map создаст, его можно назвать как угодно далее в круглых скобках укажи JSX который ты хочешь отрисовать вместо обьекта в массиве
-------------------CODE-------------------
//App.js
import { useState } from 'react';
import PostItem from './components/PostItem/PostItem';
import './styles/App.css';

function App() {
  const [posts, setPosts] = useState([
    { id: 1, title: 'JavaScrpt', body: 'description' },
    { id: 2, title: 'JavaScrpt 2', body: 'description' },
    { id: 3, title: 'JavaScrpt 3', body: 'description' },
  ]);

  return (
    <div className="App">
      <h1 style={{ textAlin: 'center' }}>Post list</h1>
      {posts.map((post) => (
        <PostItem post={post} key={post.id} />
      ))}
    </div>
  );
}

export default App;

//PostItem.jsx
import React from 'react';

export default function PostItem(props) {
  return (
    <div className="post">
      <div className="post__content">
        <strong>
          {props.post.id}. {props.post.title}
        </strong>
        <div>{props.post.body}</div>
      </div>
      <div className="post__btns">
        <button>Delete</button>
      </div>
    </div>
  );
}
------------------/CODE-------------------
В React при создании списка обязательно указывай свойство key для каждого элемента списка причем значение key обязательно делай уникальным и не используй index массива для этого


Как сделать инпут управляемым?
Создаю useState и в свойствах input прописываю value={/*переменная useState*/} далее пишу свойство onChange(e => /*функция useState*/(e.target.value))


ALWAIS write import { useState } from 'react' instead of import useState from 'react'

Внутри дочернего компонента я не имею доступ к состоянию родительмкого, а поскольку пропсы можно передовать только от родителя к ребенку я применю хитрость создав в родительском компоненте функцию которую я передам пропсом в дочерний компонент там её вызову передав в эту функцию параметрамами данные котые я хочу передать к родительскому компоненту

Как отрисовать надпись при отсутвстиви постов?
Логика: Если постов нет отрисовать "Посты не найдены" еще логичнее: если длина массива с постами ровна нулю отрендерить <div>Посты не найдены</div>
-------------------CODE-------------------

{posts.length !== 0 ? (
  <PostList remove={removePost} posts={posts} title={'Post list'} />
) : (
  <h2 style={{ textAlign: 'center' }}>Посты не найдены!</h2>
)}

------------------/CODE-------------------


Как сделать компонент упровляемым?
Для этого используеться:
useState
value - свойство компонента
onChange

Реализация через обьект
1:
Создаю useState, помещаю в него обьект с нужными полями в данном случае title и body, их я приравниваю к пустой строке
2: 
Вешаю на компонент onChange это функция, которая отслеживает взаимодействие пользователя и компонента например нажатие или ввод символа в ней пишу стрелоную функцию которая принимает event (сокрощенно e) и которая вызывает функцию изменения состояния useState в которой я разворачиваю все поля обьекта post (ведь я прописал что useState равен обьекту и дал этому обьекту поля title и body) а дальше я преписываю нужное мне поле в данном случае title с пустой строки на значение этого компонента командой 'e.target.value' 
e - сокращение event 
target - сам компонент с которым происходит event то есть событие 
value свойство этого компонента которое мы приравниваем к обьекту пост командой 'value={post}'
-------------------CODE-------------------
//PostForm.jsx

import { useState } from 'react';
import Input from '../UI components/Input/Input';
import Button from '../UI components/Button/Button';

const PostForm = ({ create }) => {
  const [post, setPost] = useState({ title: '', body: '' });

  const addNewPost = (e) => {
    e.preventDefault();
    const newPost = {
      ...post,
      id: Date.now(),
    };
    create(newPost);
    setPost({ title: '', body: '' });
  };

  return (
    <form>
      <Input
        type="text"
        value={post.title} // то самое value в данном случае компонента Input 
        onChange={(e) => setPost({ ...post, title: e.target.value })} // тот самый onChange
        placeholder="Post name"
      />
      <Input
        type="text"
        value={post.body}
        onChange={(e) => setPost({ ...post, body: e.target.value })}
        placeholder="Post description"
      />
      <Button onClick={addNewPost} disablded="true">
        Create post
      </Button>
    </form>
  );
};

export default PostForm;

------------------/CODE-------------------


Я могу реализовать двухсторонее связывание нкжного мне DOW элемента даже если я вынес его в отдельный коспонент для этого я просто передаю onChange пропсами, принимаю его в компоненте и работаю с ним так как будто он внутри этого тега